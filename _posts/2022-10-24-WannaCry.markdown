---
layout: post
title: "WannaCry Malware Analysis"
categories: blog malanalysis 
excerpt_separator: <!-- excerpt_end -->
---
<!-- excerpt_start -->
This was my analysis on the Wannacry ransomware, which I performed while I was studying in the TCM malware analysis lab.
<!-- excerpt_end -->

![monke](/images/Wannacry/Monke.jpeg)
<br>
<br>
<br>

### Executive Summary
Md5 - db349b97c37d22f5ea1d1841e3c89eb4

The wannaCry Ransomware abuses the [EternalBlue Exploit](https://www.avast.com/c-eternalblue), thus allowing the malware
to gain administrator privileges upon accessing the machine; the Malware checks for other machines within
the subnet with ARP calls, creates a hidden folder within C:\ which extracts the TOR browser for bitcoin payment, than encrypts everything
that isn't in SYSTEM32 or essential for the system to run.
<br>
<br>

### High-Level Technical Summary
WannaCry Attempts to connect to hxxp[://]www[.]iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com, if connection to this url fails, the malware to proceed as normal, encrypting
and trying to spread to other host vulnerable to the EternalBlue Exploit. The malware unpacks into C:\, uses task scheduler for 
persistence, checks for other host within the network, encrypts all files, finally starts scanning random IPs within the WWW 
for host with this same vulnerability.

![Graph](/images/Wannacry/WannacryGraph.jpeg)
<br>
<br>

### Basic Static Analysis
![strings1](/images/Wannacry/strings1.jpeg)
Url In plain string text
<br>

![strings2](/images/Wannacry/strings2.jpeg)
icacls command is executed to a file with a hidden attribute
<br>

![IATS](/images/Wannacry/IATs.jpeg)
Multiple IAT's from the kernel32.api is called
<br>

![IATS](/images/Wannacry/Compression.jpeg)
Virtual Size and Raw Size are similar, file may not be compressed
<br>
<br>
<br>

### Dynamic Analysis
![killswitchcheck](/images/Wannacry/Calltokillswitch.jpeg)
Checks if it can connect to this url, if it can, it will not execute, if not, execute as normal

![arpcall](/images/Wannacry/arpcalls.jpeg)
Check other devices within subnet, vulnerability check on local network
<br>

![zombiescanning](/images/Wannacry/zombiescanvuln.jpeg)
Start scanning for hosts on the WWW, allowing it to spread to another host if the vulnerability is found
<br>

![smbconnect](/images/Wannacry/callstomalicioussmbs.jpeg)
Connect to a malicious and a local SMB using anonymous creds
<br>

![artifacts](/images/Wannacry/unpackedartifacts.jpeg)
Unpacks Tor files here along with ransom notes demanding ransom
<br>

### Advanced Static Analysis
![killswitchcheck](/images/Wannacry/killswitchx86.jpeg)
Check if it can connect to url, if not continue... confirmed when I switched the "Jump if Not Equal" instruction, and it executed with the opposite condition
<br>

![failandsuccesscondition](/images/Wannacry/continueifnotfound.jpeg)
Left graph displays instructions if the binary can't connect to the url, Right graph is if it can connect to the url
<br>

### Yara Rule


```yara
rule Wannacry {

	meta:
		last_updated = "2022-10-24"
		author = "Potatech"
		description = "Were da Wannacry at tho"

	strings:
		$strings1 = "iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea" ascii
		$strings2 = "WINDOWS"
		$strings3 = "tasksche.exe"
		$PE_magic_byte = "MZ"

	condition:
		$PE_magic_byte at 0 and
		($strings1 and $strings2) or
		($strings1 and $strings3)
			 
}
```