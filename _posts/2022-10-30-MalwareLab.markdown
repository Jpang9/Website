---
layout: post
title: "Building a Malware Analysis Lab"
categories: blog HomeLab
excerpt_separator: <!-- excerpt_end -->
---

<!-- excerpt_start -->
Before performing malware analysis, you need to set up a secure lab to prevent any funny business from escaping and breaking into your 
actual system, and I doubt anyone would want that aye.
<!-- excerpt_end -->

![LetsGOOOO](/images/MalwareLab/LabBruh.jpeg)
<br>
<br>
<br>
<br>

### Virt-Manager or VmWare
In this guide, I'm going to be using Virt-Manager/Qemu, as it is something I've used since the dawn of time, it also doesn't come with any vmware registries and programs that comes when installing
windows, this is useful, as most malware usually have sandbox detection, which checks the system for any sandbox/vmware related information, which in turn, stops the malware from executing properly.
<br>
<br>
<br>

### Linux Lab
When building your linux Malware Analysis lab, there are two options I've used; you could either go with good ol [Remnux](https://remnux.org/), or you could do what I commonly do, and grab
an arch distribution you enjoy and follow the installation process for [BlackArch](https://www.blackarch.org/).

Now you may be wondering why Blackarch over Remnux? 

Simple, I don't like using gnome, and I can't be asked to customise or deal with any issues that come from switching Desktop Environments. Along with the fact, 
BlackArch is literally setup by just installing their repository onto your system, which is just simply easier in my opinion. 
<br>

##### Just a headsup, Blackarch has a problem with Inetsim as in, the ssl protocol doesn't work properly for some reason, but then you could always just use Fakenet-ng.
<br>

Once you have chosen what distribution you want; follow the installation instructions as per vendor; it should be pretty easy, as Remnux is literally a script/ISO, and 
Blackarch is literally just a repo you add to your pre-existing arch system, and is filled with tools and categories such as "blackarch-malware", which contains all malware related tools such as thezoo, a malware repository.
<br>
<br>
<br>
<br>

### Windows Lab
Building the Windows lab is pretty simple as well, as it depends on what your needs are, you could chuck a windows ISO onto the virtual machine, disable defender, then run the 
[FlareVM](https://github.com/mandiant/flare-vm) script and bobs your uncle, or you could over-complicate it like I do.

Set up a Virt-io disk driver, along with the Windows 10 [ISO](https://www.microsoft.com/en-au/software-download/windows10ISO), and the [drivers](https://wiki.archlinux.org/title/QEMU#Virtio_drivers_for_Windows) for Windows, allowing for virt-io devices to be used,
once the devices and iso has been configured; start the machine, run through the Windows10 setup as per normal until you get to the desktop; I would advise you to not have anything 
sensitive attached to this system as you know, malware... so just use an offline account.
<br>

There are a plethora of scripts I use to set up this machine; First, Activating windows, you could buy an actual license, or you could use this conveniently placed [github repo](https://github.com/massgravel/Microsoft-Activation-Scripts) that allows for activation of
microsoft products.
<br>

Since I'm using Spice as a display for my virtual machines, [Spice-guest-tools](https://www.spice-space.org/download.html) is than installed, which allows for smoother display, along with the ability to copy and 
paste files and text to and from the virtual machine, this is optional, as who knows, there could be a vulnerability which abuses this software causing malware to breakout of the virtual machine and into your system, but that hasn't happened 
yet, so it should be fine.
<br>


After Windows has been activated, you will want to perform a snapshot of your Windows system as the next process is the debloating process; a snapshot is recommended incase
something gets removed unintentionally and yea, unless you want to follow the entire process of installing windows again, might as well snapshot your system; debloating is done with 
[Privacy Sexy](https://privacy.sexy/), an opensource, windows customisation and debloating tool which gives you a list of system options you can adjust than execute.
I would recommend you the standard selection, along with disabling the "Disable Active Probing" option located in the "DISABLE OS DATA COLLECTION" tab, as this will mess with your wireshark logs, I would also recommend you disabling 
Tamper Protection within defenders settings, along with disabling any other settings such as realtime monitoring, and while you are at it, add the exception to your Windows root drive, otherwise the FlareVM script won't execute
properly.
![PrivacySexy](/images/MalwareLab/PrivacySexy.jpeg)
<br>
<br>

If any problems occur, you can than go back to snapshot you took earlier, but moving on, follow the instructions on installing FlareVM, and it should be smooth sailing from there.

<br>
<br>
<br>

### Networking
Creating a network that cannot interact with your actual network is pretty easy in virt-manager; The setting is in Edit -> Connection Details -> Virtual Networks Tab
![networking](/images/MalwareLab/networkconfig.jpeg)
<br>
<br>

Create a new virtual Network, name it whatever, set the mode into Isolated, with the network as whatever private IP class you want(Disable DHCP If you want), 
and then assign that virtual network into both the windows and linux VM, after that you will need to boot both machines up and create a static IP for both machines,
I normally go linux as the gateway address with the ip 10.0.0.2, and windows pointing to linux with the ip of 10.0.0.3, make sure your host machine is patched fully at all times, as your host machine resides on the first
ip within the IP network.
![virtualnetworkConfig](/images/MalwareLab/virtnetwork.jpeg)
<br>
<br>

Make sure both the linux box and the windows box cannot hit the World Wide Web by pinging www.google.com and 1.1.1.1, because if the DNS can resolve the hostname, or if the IP is reachable, it means the boxes are not isolated properly.
Which is dangerous as you could actually receive commands from the malicious listening post, which is problematic as the malware will be out of your control. 
Once you have everything setup create a snapshot of both machines, to indicate these two machines are new and ready for malware detonation.
![NetworkIsolation](/images/MalwareLab/NetworkIsolation.jpeg)
<br>
<br>
<br>

### MAKE SURE YOUR SNAPSHOTS WORK, ALWAYS TEST
You wouldn't want to run malware on your computer, only to realise your snapshots don't work.
![Pain](/images/MalwareLab/Pain.jpg)
